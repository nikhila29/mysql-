SQL----------------Structured Query Language

SQL is a standard -- You will hear about MYsql vs Oracle vs SQL server.

Key-->  Once you get proficient in one, you will find it very easy to pickup
the others.


----------------------------------------where--------------------------------------------

Where is how we control which rows are returned.  

Example:
SELECT Title
FROM movies
WHERE 1=1;

Always true, so return every title for all movies(rows) in the table.

SELECT 1 As Result
FROM movies
WHERE 1=1;

SELECT 1 As Result
FROM movies
WHERE Rating=’PG’;

It’s important to see that WHERE only controls which rows are returned, but has no other effect on what data actually returns.

SELECT *
FROM movies
WHERE RATING = "PG" 
 AND Title LIKE "Night%";

You can string as may conditions together as you need using AND

SELECT *
FROM movies
WHERE RATING = "PG" 
 AND Title NOT LIKE "Night%";

NOT allows you to define what you don’t want displayed.


----------------------------------case statements-----------------------------------------------------------------------



Case statements allow a lot of flexibility. They evaluate the first WHEN, and if it passes, it uses the THEN for the return value and skips to the next row.

Else option and allows for a catch-all value like “No Information”
The different 'whens' can be inspecting different values, and the CASE Statment can be used in the SELECT or the WHERE.  
Let revisit the NULL query from earlier.

SELECT *
FROM movies
WHERE CASE 
        WHEN rating IS NULL THEN 1
        WHEN rating = ''    THEN 1
        WHEN release_year <= 2007 THEN 1
      END = 1;


--------------------------------------------------------------------------------Date and time-----------------------------------------------------------------------------------

Some time functions:

SELECT NOW()
      ,CURDATE()
      ,CURTIME();

More information on time functons: http://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html

MySQL has prebuilt functions that offer some handy functionality when dealing with dates and times.

NOW() returns the system date and time of the server  
CURDATE() returns the system date without the time
CURTIME() returns the system time without the date

NOW() is useful for adding a timestamp when a row is being added to the database, but let’s use it to explore some other data functions 

SELECT NOW()
      ,CURDATE()
      ,CURTIME()
      ,YEAR(NOW())
      ,YEAR(CURDATE());

We can have just the year pulled out.  This function could easily be used to help group rows by years

SELECT NOW()
      ,MONTH(NOW())
      ,MONTHNAME(Now());

MySQL allows you to pull just the month by number or name

SELECT NOW()
      ,DAY(NOW())
      ,DAYNAME(Now())
      ,DAYOFMONTH(NOW())
      ,DAYOFWEEK(NOW())
      ,DAYOFYEAR(NOW());

DAY gives the day of the month
DAYNAME gives the name of the day of the week
DAYOFMONTH is the same as DAY
DAYOFWEEK gives the number corresponding to the day. Sunday is 1 and Saturday is 7
DAYOFYEAR gives the day if we were counting from Jan 1st as 1, 

You may have noticed that your cloud 9 Environment is not in your current timezone. Instead the System time is UTC. 
Find your timezone here:
https://en.wikipedia.org/wiki/List_of_tz_database_time_zones

Then you can set your timezone:
SET time_zone = '-7:00';
SET GLOBAL time_zone = '-7:00';

Then you can check the time difference:
select @@global.time_zone, @@session.time_zone;

You can then check your newly set time:
select NOW();


------------------------------------------------primary keys ,foreign keys----------------------------------------------------------


A primary key keeps every row unique. If you were going to join two tables together, 
you can use the primary key from one table to reference another



-------------------------------Joins and aliases ------------------------------------------------------------


While specifying the table is necessary in many situations, and always a good habit,
it causes a Lot of typing and can make the code look overwhelming. Which is why we use aliases. because for clean code
You can use anything as the alias, 
It’s clean and straightforward. All of the examples and code going forward will incorporate this type of aliasing.


---------------------------INNER, LEFT, OUTER and RIGHT Joins ---------------------------------------------


 let's get the main types straight: INNER, LEFT OUTER, RIGHT OUTER and FULL OUTER.  

There are a few ways to specify these types in SQL, but for the purposes of this course, we will stick to these terms: LEFT OUTER JOIN is often called a LEFT JOIN, and an INNER JOIN may be referred to as a JOIN. A FULL OUTER JOIN can be called an OUTER JOIN. etc.

Imagine we have two tables:

Table A
 ColA
  1
  2
  3
  4

Table B 
 ColB
  3
  4
  5
  6

If we were to join these tables together, the number of rows returned would depend on the join we use. Notice 1 and 2 are unique to Table A, 5 and 6 are unique to table B. 3 and 4 are common to both tables.


--------------------------INNER JOIN----------------------------------------------


SELECT *
FROM A INNER JOIN B ON A.ColA = B.ColB;

This would return:
ColA | ColB
 3   |  3
 4   |  4
INNER JOIN requires that the value be on both tables


---------------------------------------------LEFT JOIN------------------------------------------


SELECT *
FROM A LEFT OUTER JOIN B ON A.ColA = B.ColB;

This would return:
ColA | ColB
 1   | NULL
 2   | NULL
 3   |  3
 4   |  4
LEFT OUTER JOIN returns everything from the first table (left) whether or not the second table has a corresponding row


------------------------------------------RIGHT JOIN---------------------------------------------------


SELECT *
FROM A RIGHT OUTER JOIN B ON A.ColA = B.ColB;

This would return:
ColA | ColB
 3   |  3
 4   |  4
 NULL|  5
 NULL|  6
RIGHT OUTER JOIN returns everything from the second table (right) whether or not the first table has a corresponding row


------------------------------------------OUTER JOIN----------------------------------------------------------


SELECT *
FROM A FULL OUTER JOIN B ON A.ColA = B.ColB;

This would return:
ColA | ColB
 1   | NULL
 2   | NULL
 3   |  3
 4   |  4
 NULL|  5
 NULL|  6
FULL OUTER JOIN returns everything from both tables whether or not there are corresponding rows





---------------------------------------------subselects---------------------------------------------


SQL allows queries inside of other quiries which can be extermely useful.
SUBSELECTS are also useful when you want to refer to a table but don’t plan on returning results from that additional table.


ex:  select a.first_name ,
            a.last_name ,
            ifnull(min(c.release_year), 'N/A') as firstDirected
            ,ifnull(max(b.release_year), 'N/A') as latestRelease ,
            d.cnt as moviesdirected from people a 
            left outer join movies b 
                  on b.director = a.actorID 
            left outer join movies c
                  on c.director = b.director
            left outer join 
                  (select z.director as actorID, count(z.movieID) as cnt from movies z group by z.director)  d 
                  on d.actorID = a.actorID 
            group by a.first_name  ,
                  a.last_name, 
                  d.cnt 
            order by d.cnt desc;


Let’s try to pull a list of people who have directed movies, but we don’t care to display anything from the movies.

SELECT A.FIRST_NAME
      ,A.LAST_NAME
FROM people A
WHERE EXISTS (SELECT 1
              FROM movies Z
              WHERE Z.Director = A.ActorID) 
GROUP BY A.FIRST_NAME
        ,A.LAST_NAME;  

Notice that they SELECT is set to return 1.  You need to have a select statement, but there is no point in specifying anything there as it will not be used.

Another alternative to accomplish the same thing is using IN.  The statement Z.Director = A.ActorID is removed and replaced by putting 1 and only one column in the SELECT statement (Z.Director) and replacing ‘EXISTS’ with ‘A.ActorID IN’
SELECT A.FIRST_NAME
      ,A.LAST_NAME
FROM people A
WHERE A.ActorID IN (SELECT Z.Director
                    FROM movies Z) 
GROUP BY A.FIRST_NAME
        ,A.LAST_NAME;  

We can use NOT to find anyone on the People table who has never directed a movie
SELECT A.FIRST_NAME
      ,A.LAST_NAME
FROM people A
WHERE NOT EXISTS (SELECT 1
                  FROM movies Z
                  WHERE Z.Director = A.ActorID) 
GROUP BY A.FIRST_NAME
        ,A.LAST_NAME; 

Similarly, we can use NOT IN to find the same information:

SELECT A.FIRST_NAME
      ,A.LAST_NAME
FROM people A
WHERE A.ActorID NOT IN (SELECT Z.Director
                        FROM movies Z) 
GROUP BY A.FIRST_NAME
        ,A.LAST_NAME; 





